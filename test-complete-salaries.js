// Test completo del flujo de project profile salaries
// Pegar en la consola del navegador en la p√°gina de perfiles

console.log('üöÄ Testing COMPLETE project profile salaries flow...\n');

async function testCompleteFlow() {
  try {
    // 1. Configuraci√≥n de test
    const projectId = 1; // Cambiar por un ID v√°lido
    const testCountryId = 1;
    const testSalary = 65000;
    const testYear = 2025;
    
    console.log('üìã Configuraci√≥n de test:');
    console.log(`- Project ID: ${projectId}`);
    console.log(`- Country ID: ${testCountryId}`);
    console.log(`- Test Salary: ${testSalary}`);
    console.log(`- Test Year: ${testYear}`);
    
    // 2. Obtener project profiles
    console.log('\nüîç Step 1: Obteniendo project profiles...');
    const projectProfilesRes = await fetch(`/api/project-profiles/${projectId}`, {
      credentials: 'include',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (!projectProfilesRes.ok) {
      throw new Error(`Failed to get project profiles: ${projectProfilesRes.status}`);
    }
    
    const projectProfiles = await projectProfilesRes.json();
    console.log('‚úÖ Project profiles:', projectProfiles);
    
    if (projectProfiles.length === 0) {
      console.log('‚ùå No project profiles found. Create some first.');
      return;
    }
    
    const testProfile = projectProfiles[0];
    const projectProfileId = testProfile.project_profile_id;
    
    if (!projectProfileId) {
      console.log('‚ùå project_profile_id not found in:', testProfile);
      return;
    }
    
    console.log(`‚úÖ Using project_profile_id: ${projectProfileId}`);
    
    // 3. Verificar salarios existentes
    console.log('\nüîç Step 2: Verificando salarios existentes...');
    const existingSalariesRes = await fetch(`/api/project-profile-salaries?project_profile_id=${projectProfileId}`, {
      credentials: 'include',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (!existingSalariesRes.ok) {
      throw new Error(`Failed to get existing salaries: ${existingSalariesRes.status}`);
    }
    
    const existingSalaries = await existingSalariesRes.json();
    console.log('‚úÖ Existing salaries:', existingSalaries);
    
    // 4. Test POST (crear nuevo salario)
    console.log('\nüÜï Step 3: Testing POST (crear nuevo salario)...');
    const newSalaryData = {
      project_profile_id: projectProfileId,
      country_id: testCountryId,
      salary: testSalary,
      year: testYear
    };
    
    console.log('üì§ Enviando:', newSalaryData);
    
    const createRes = await fetch('/api/project-profile-salaries', {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(newSalaryData)
    });
    
    if (createRes.ok) {
      const created = await createRes.json();
      console.log('‚úÖ Salary created successfully:', created);
      
      // 5. Test PUT (actualizar salario)
      console.log('\nüìù Step 4: Testing PUT (actualizar salario)...');
      const updatedSalary = testSalary + 5000;
      const updateData = {
        project_profile_id: projectProfileId,
        country_id: testCountryId,
        salary: updatedSalary,
        year: testYear
      };
      
      console.log('üì§ Actualizando a:', updatedSalary);
      
      const updateRes = await fetch(`/api/project-profile-salaries/${created.id}`, {
        method: 'PUT',
        credentials: 'include',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updateData)
      });
      
      if (updateRes.ok) {
        const updated = await updateRes.json();
        console.log('‚úÖ Salary updated successfully:', updated);
      } else {
        const updateError = await updateRes.text();
        console.log('‚ùå Error updating salary:', updateRes.status, updateError);
      }
      
      // 6. Verificar cambios finales
      console.log('\nüîç Step 5: Verificando cambios finales...');
      const finalSalariesRes = await fetch(`/api/project-profile-salaries?project_profile_id=${projectProfileId}`, {
        credentials: 'include',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      
      if (finalSalariesRes.ok) {
        const finalSalaries = await finalSalariesRes.json();
        console.log('‚úÖ Final salaries:', finalSalaries);
        console.log('\nüéâ TEST COMPLETADO EXITOSAMENTE!');
      }
      
    } else {
      const createError = await createRes.text();
      console.log('‚ùå Error creating salary:', createRes.status, createError);
      
      // Mostrar detalles del error
      try {
        const errorJson = JSON.parse(createError);
        console.log('üìã Error details:', errorJson);
      } catch (e) {
        console.log('üìã Raw error:', createError);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// Ejecutar test
testCompleteFlow();

console.log(`
üìñ Instrucciones:
1. Aseg√∫rate de estar logueado
2. Ve al Network tab en Developer Tools
3. Observa las requests HTTP que se hacen
4. Si hay errores, comparte los detalles espec√≠ficos
5. Verifica que los datos se guarden en la base de datos
`);